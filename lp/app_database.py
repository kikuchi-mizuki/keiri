import os
import logging
from utils.db import get_db_connection

logger = logging.getLogger(__name__)

def init_db():
    """„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÂàùÊúüÂåñÔºà‰ºÅÊ•≠„É¶„Éº„Ç∂„ÉºÂ∞ÇÁî®ÊúÄÂ∞èÈôêË®≠Ë®àÔºâ"""
    logger.info("üîÑ „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÈñãÂßã")
    conn = None
    c = None
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        # „Éá„Éº„Çø„Éô„Éº„Çπ„Çø„Ç§„Éó„ÇíÁ¢∫Ë™ç
        from utils.db import get_db_type
        db_type = get_db_type()
        
        if db_type == 'postgresql':
            # ‰ºÅÊ•≠Âü∫Êú¨ÊÉÖÂ†±„ÉÜ„Éº„Éñ„É´ÔºàÊúÄÂ∞èÈôêÔºâ
            c.execute('''
                CREATE TABLE IF NOT EXISTS companies (
                    id SERIAL PRIMARY KEY,
                    company_name VARCHAR(255) NOT NULL,
                    email VARCHAR(255) NOT NULL,
                    status VARCHAR(50) DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # ÊúàÈ°çÂü∫Êú¨„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´Ôºà‰ºÅÊ•≠Âçò‰ΩçÔºâ
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_monthly_subscriptions (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    stripe_subscription_id VARCHAR(255),
                    subscription_status VARCHAR(50) DEFAULT 'active',
                    monthly_base_price INTEGER DEFAULT 3900,
                    current_period_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    current_period_end TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # ‰ºÅÊ•≠„Ç≥„É≥„ÉÜ„É≥„ÉÑÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_contents (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    content_type VARCHAR(100) NOT NULL,
                    content_status VARCHAR(50) DEFAULT 'active',
                    stripe_price_id VARCHAR(255),
                    monthly_price INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # ‰ºÅÊ•≠LINE„Ç¢„Ç´„Ç¶„É≥„ÉàÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_line_accounts (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    line_channel_id VARCHAR(255) UNIQUE,
                    line_channel_secret VARCHAR(255),
                    line_channel_access_token VARCHAR(255),
                    line_user_id VARCHAR(255),
                    line_display_name VARCHAR(255),
                    line_picture_url TEXT,
                    status VARCHAR(50) DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # ‰ºÅÊ•≠ÈÄöÁü•ÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_notifications (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    notification_type VARCHAR(100) NOT NULL,
                    notification_status VARCHAR(50) DEFAULT 'active',
                    notification_settings JSONB,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # ‰ºÅÊ•≠Ëß£Á¥ÑÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_cancellations (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    content_type VARCHAR(100),
                    cancellation_reason TEXT,
                    cancellation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÊúüÈñìÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS subscription_periods (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    stripe_subscription_id VARCHAR(255),
                    period_start TIMESTAMP NOT NULL,
                    period_end TIMESTAMP NOT NULL,
                    status VARCHAR(50) DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # ‰ΩøÁî®Èáè„É≠„Ç∞„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS usage_logs (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    content_type VARCHAR(100),
                    usage_count INTEGER DEFAULT 0,
                    usage_date DATE DEFAULT CURRENT_DATE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # „É¶„Éº„Ç∂„ÉºÁä∂ÊÖãÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS user_states (
                    id SERIAL PRIMARY KEY,
                    line_user_id VARCHAR(255) UNIQUE,
                    current_state VARCHAR(100) DEFAULT 'initial',
                    state_data JSONB,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            logger.info("‚úÖ PostgreSQL„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü")
            
        else:
            # SQLiteÁî®„ÅÆ„ÉÜ„Éº„Éñ„É´‰ΩúÊàê
            c.execute('''
                CREATE TABLE IF NOT EXISTS companies (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    email TEXT NOT NULL,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # „Åù„ÅÆ‰ªñ„ÅÆSQLite„ÉÜ„Éº„Éñ„É´„ÇÇÂêåÊßò„Å´‰ΩúÊàê
            # ... (ÁúÅÁï•)
            
            conn.commit()
            logger.info("‚úÖ SQLite„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü")
        
        conn.close()
        logger.info("‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÂÆå‰∫Ü")
        
    except Exception as e:
        logger.error(f"‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
        if conn:
            conn.rollback()
            conn.close()
        raise e
