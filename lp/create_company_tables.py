#!/usr/bin/env python3
"""
‰ºÅÊ•≠ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Áî®„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÜ„Éº„Éñ„É´‰ΩúÊàê„Çπ„ÇØ„É™„Éó„Éà
"""

import os
import sys
from utils.db import get_db_connection, get_db_type

def create_company_tables():
    """‰ºÅÊ•≠ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Áî®„ÅÆ„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        print("=== ‰ºÅÊ•≠ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Áî®„ÉÜ„Éº„Éñ„É´‰ΩúÊàê ===")
        
        # „Éá„Éº„Çø„Éô„Éº„Çπ„Çø„Ç§„Éó„ÇíÁ¢∫Ë™ç
        db_type = get_db_type()
        print(f"„Éá„Éº„Çø„Éô„Éº„Çπ„Çø„Ç§„Éó: {db_type}")
        
        if db_type == 'postgresql':
            # PostgreSQLÁî®„ÅÆ„ÉÜ„Éº„Éñ„É´‰ΩúÊàê
            
            # 1. ‰ºÅÊ•≠Âü∫Êú¨ÊÉÖÂ†±„ÉÜ„Éº„Éñ„É´
            print("üìã companies„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            c.execute('''
                CREATE TABLE IF NOT EXISTS companies (
                    id SERIAL PRIMARY KEY,
                    company_name VARCHAR(255) NOT NULL,
                    company_code VARCHAR(50) UNIQUE NOT NULL,
                    email VARCHAR(255) NOT NULL,
                    phone VARCHAR(50),
                    address TEXT,
                    industry VARCHAR(100),
                    employee_count INTEGER,
                    status VARCHAR(50) DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # 2. ‰ºÅÊ•≠LINE„Ç¢„Ç´„Ç¶„É≥„Éà„ÉÜ„Éº„Éñ„É´
            print("üìã company_line_accounts„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_line_accounts (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    line_channel_id VARCHAR(255) UNIQUE NOT NULL,
                    line_channel_access_token VARCHAR(255) NOT NULL,
                    line_channel_secret VARCHAR(255) NOT NULL,
                    line_basic_id VARCHAR(255),
                    line_qr_code_url VARCHAR(500),
                    webhook_url VARCHAR(500),
                    status VARCHAR(50) DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
                )
            ''')
            
            # 3. ‰ºÅÊ•≠Ê±∫Ê∏àÊÉÖÂ†±„ÉÜ„Éº„Éñ„É´
            print("üìã company_payments„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_payments (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    stripe_customer_id VARCHAR(255) UNIQUE NOT NULL,
                    stripe_subscription_id VARCHAR(255),
                    subscription_status VARCHAR(50),
                    current_period_start TIMESTAMP,
                    current_period_end TIMESTAMP,
                    trial_start TIMESTAMP,
                    trial_end TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
                )
            ''')
            
            # 4. ‰ºÅÊ•≠„Ç≥„É≥„ÉÜ„É≥„ÉÑÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            print("üìã company_contents„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_contents (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    content_type VARCHAR(100) NOT NULL,
                    content_name VARCHAR(255) NOT NULL,
                    status VARCHAR(50) DEFAULT 'active',
                    line_bot_url VARCHAR(500),
                    api_endpoint VARCHAR(500),
                    usage_count INTEGER DEFAULT 0,
                    last_used_at TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
                )
            ''')
            
            # 5. ‰ºÅÊ•≠ÈÄöÁü•Ë®≠ÂÆö„ÉÜ„Éº„Éñ„É´
            print("üìã company_notifications„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_notifications (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    notification_type VARCHAR(100) NOT NULL,
                    is_enabled BOOLEAN DEFAULT TRUE,
                    recipients JSONB,
                    schedule VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
                )
            ''')
            
            # 6. ‰ºÅÊ•≠Ëß£Á¥ÑÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
            print("üìã company_cancellations„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_cancellations (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    cancellation_reason VARCHAR(255),
                    cancelled_by VARCHAR(100),
                    data_deletion_status VARCHAR(50) DEFAULT 'pending',
                    line_account_status VARCHAR(50) DEFAULT 'active',
                    cancelled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
                )
            ''')
            
            # 7. ‰ºÅÊ•≠„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            print("üìã company_users„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_users (
                    id SERIAL PRIMARY KEY,
                    company_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    role VARCHAR(50) DEFAULT 'user',
                    permissions JSONB,
                    status VARCHAR(50) DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                    UNIQUE(company_id, user_id)
                )
            ''')
            
        else:
            # SQLiteÁî®„ÅÆ„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÔºàÈñãÁô∫Áí∞Â¢ÉÁî®Ôºâ
            print("üìã SQLiteÁî®„ÅÆ„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")
            
            # 1. ‰ºÅÊ•≠Âü∫Êú¨ÊÉÖÂ†±„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS companies (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    company_code TEXT UNIQUE NOT NULL,
                    email TEXT NOT NULL,
                    phone TEXT,
                    address TEXT,
                    industry TEXT,
                    employee_count INTEGER,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # 2. ‰ºÅÊ•≠LINE„Ç¢„Ç´„Ç¶„É≥„Éà„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_line_accounts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_id INTEGER NOT NULL,
                    line_channel_id TEXT UNIQUE NOT NULL,
                    line_channel_access_token TEXT NOT NULL,
                    line_channel_secret TEXT NOT NULL,
                    line_basic_id TEXT,
                    line_qr_code_url TEXT,
                    webhook_url TEXT,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # 3. ‰ºÅÊ•≠Ê±∫Ê∏àÊÉÖÂ†±„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_payments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_id INTEGER NOT NULL,
                    stripe_customer_id TEXT UNIQUE NOT NULL,
                    stripe_subscription_id TEXT,
                    subscription_status TEXT,
                    current_period_start TIMESTAMP,
                    current_period_end TIMESTAMP,
                    trial_start TIMESTAMP,
                    trial_end TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # 4. ‰ºÅÊ•≠„Ç≥„É≥„ÉÜ„É≥„ÉÑÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_contents (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_id INTEGER NOT NULL,
                    content_type TEXT NOT NULL,
                    content_name TEXT NOT NULL,
                    status TEXT DEFAULT 'active',
                    line_bot_url TEXT,
                    api_endpoint TEXT,
                    usage_count INTEGER DEFAULT 0,
                    last_used_at TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # 5. ‰ºÅÊ•≠ÈÄöÁü•Ë®≠ÂÆö„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_id INTEGER NOT NULL,
                    notification_type TEXT NOT NULL,
                    is_enabled BOOLEAN DEFAULT 1,
                    recipients TEXT,
                    schedule TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # 6. ‰ºÅÊ•≠Ëß£Á¥ÑÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_cancellations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_id INTEGER NOT NULL,
                    cancellation_reason TEXT,
                    cancelled_by TEXT,
                    data_deletion_status TEXT DEFAULT 'pending',
                    line_account_status TEXT DEFAULT 'active',
                    cancelled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id)
                )
            ''')
            
            # 7. ‰ºÅÊ•≠„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
            c.execute('''
                CREATE TABLE IF NOT EXISTS company_users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    role TEXT DEFAULT 'user',
                    permissions TEXT,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (company_id) REFERENCES companies(id),
                    FOREIGN KEY (user_id) REFERENCES users(id),
                    UNIQUE(company_id, user_id)
                )
            ''')
        
        conn.commit()
        print("‚úÖ ‰ºÅÊ•≠ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Áî®„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü")
        
        # „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíÁ¢∫Ë™ç
        if db_type == 'postgresql':
            c.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_name LIKE 'company%'
                ORDER BY table_name
            """)
        else:
            c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'company%'")
        
        tables = c.fetchall()
        print(f"\nüìã ‰ΩúÊàê„Åï„Çå„Åü‰ºÅÊ•≠ÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´:")
        for table in tables:
            print(f"  - {table[0]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå „Ç®„É©„Éº: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = create_company_tables()
    if success:
        print("\nüéâ ‰ºÅÊ•≠ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Áî®„ÉÜ„Éº„Éñ„É´„ÅÆ‰ΩúÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")
    else:
        print("\n‚ùå „ÉÜ„Éº„Éñ„É´‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ")
        sys.exit(1) 